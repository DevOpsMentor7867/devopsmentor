const crypto = require("crypto");
const redis = require("redis");
const Bull = require("bull");
const nodemailer = require('nodemailer');
const User = require('../models/userModel');

console.log('User model:', User);
// nodemailer
const transporter = nodemailer.createTransport({
  service: 'gmail',
  auth: {
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_PASS
  }
});

// connecting client to redis server
const redisClient = redis.createClient({
  url: 'redis://localhost:6379'
});

//  error for redis
redisClient.connect().catch(console.error);

// queues for concurrency, 
const registration_queue = new Bull('registration', {
  redis: { port: 6379, host: 'localhost' }
});

// otp expiry duration
const OTP_EXPIRY = 120; 

// functions 
const generateOtp = () => {
  return crypto.randomInt(100000, 999999).toString();
};

async function sendOtpEmail(email, otp) {
  try {
    await transporter.sendMail({
      from: process.env.EMAIL_USER,
      to: email,
      subject: 'Registration OTP',
      text: `Your OTP is ${otp}. It will expire in 2 minutes.`
    });
    console.log(`OTP email sent to ${email}`);
  } catch (error) {
    console.error(`Failed to send OTP email to ${email}:`, error);
    throw error; 
  }
}

// queue process to handle multiple client request for registration
registration_queue.process(async (job) => {
  const { email, password } = job.data;

  try {
    const registrationKey = `registration:${email}`;
    const registrationExists = await redisClient.get(registrationKey);

    if (registrationExists) {
      console.log(`Registration already exists for ${email}`);
      return { message: 'Registration already in progress. Please check your email' };
    }

    const otp = generateOtp();
    await redisClient.set(registrationKey, JSON.stringify({ password, otp }), {
      EX: OTP_EXPIRY
    });

    await sendOtpEmail(email, otp);
    console.log(`OTP sent to ${email}`);
    return { message: 'OTP sent to email. Please verify within 2 minutes.' };
  } catch (error) {
    console.error(`Error in registration queue process: ${error.message}`);
    throw error;
  }
});


// user controller defined for authentication
const userController = {
  register: async (req, res) => {
    try {
      const { email, password } = req.body;
      console.log(`Attempting to register user: ${email}`);
      const job = await registration_queue.add({ email, password }, {
        attempts: 3,
        backoff: {
          type: 'exponential',
          delay: 2000
        }
      });
      const result = await job.finished();
      console.log(`Registration job completed result: ${JSON.stringify(result)}`);
      res.status(200).json(result);
    } catch (error) {
      console.error('Registration error:', error);
      res.status(500).json({ message: 'Registration failed', error: error.message });
    }
  },

  verifyOtp: async (req, res) => {
    try {
      console.log('User model in verifyOtp:', User);
      const { email, otp } = req.body;
      const stored_key = `registration:${email}`;
      const stored_data = await redisClient.get(stored_key);
      if (!stored_data) {
        return res.status(400).json({ message: 'OTP has expired or is invalid' });
      }
      const { password: storedPassword, otp: storedOTP } = JSON.parse(stored_data);
      if (otp == storedOTP) {
        const newUser = new User({ email, password: storedPassword });
        await newUser.save();
        await redisClient.del(stored_key);
        return res.status(200).json({ message: 'OTP verified successfully' });
      } else {
        return res.status(400).json({ message: 'Incorrect OTP' });
      }
    }
    catch (error) {
      console.error('OTP verification error:', error);
      res.status(500).json({ message: 'OTP verification failed', error: error.message });
    }

  }
};

registration_queue.on('error', (error) => {
  console.error('Registration queue error:', error);
});

registration_queue.on('failed', (job, error) => {
  console.error(`Job ${job.id} failed:`, error);
});

module.exports = userController;